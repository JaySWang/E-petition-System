<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
         xmlns:sec ="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.1.xsd">




 <!--登录页面不过滤 -->
        <sec:http pattern="/login.jsp" security="none" /> 
    
    
    <sec:http  access-denied-page="/accessDenied.jsp">
        <sec:form-login login-page="/login.jsp"/>
        
        
         

       
       
       
   <sec:session-management>  
            <sec:concurrency-control max-sessions="1"  
                error-if-maximum-exceeded="false" />  
        </sec:session-management> 
        
        <!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
               
               <sec:custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />  
               
          <sec:logout invalidate-session="true" logout-url="/logout" />  
  
    
    
    </sec:http>
    



    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <bean id="myFilter" class="authentication.MyFilterSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="accessDecisionManager" ref="myAccessDecisionManagerBean"/>
        <property name="securityMetadataSource" ref="securityMetadataSource"/>
   
  </bean>
    
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
 
            <sec:authentication-manager alias="authenticationManager">  
        <sec:authentication-provider user-service-ref="myUserDetailService">  
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
            
            
              </sec:authentication-provider>
            
    </sec:authentication-manager> 
    
    
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
    <bean id="myUserDetailService" class="authentication.MyUserDetailService"/>
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <bean id="myAccessDecisionManagerBean" class="authentication.MyAccessDecisionManager"/>

    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <bean id="securityMetadataSource" class="authentication.MyInvocationSecurityMetadataSource"/> 
           
  













	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/epetition?characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		destroy-method="destroy">
		<property name="dataSource" ref="dataSource" />
		<property name="annotatedClasses">
			<list>
				<value>model.Proposal</value>
				<value>model.Aspect</value>
				<value>model.CriticalQuestion</value>
				<value>model.ArgumentScheme</value>
				<value>model.AspectType</value>
				
				
				
			

			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>





	<bean id="hibernateTransactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="hibernateTransactionAttributeSource"
		class="org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource">
		<property name="properties">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<bean id="dao" class="dao.DAOImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<bean id="proposalDAO" class="dao.ProposalDAO">
		<property name="dao" ref="dao"></property>
	</bean>
		<bean id="aspectDAO" class="dao.AspectDAO">
		<property name="dao" ref="dao"></property>
	</bean>
	<bean id="criticalQuestionDAO" class="dao.CriticalQuestionDAO">
		<property name="dao" ref="dao"></property>
	</bean>
	<bean id="argumentSchemeDAO" class="dao.ArgumentSchemeDAO">
		<property name="dao" ref="dao"></property>
	</bean>
	
	
	
<!-- configure service Bean -->
	
	<bean id="proposalService"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="hibernateTransactionManager">
		</property>
		<property name="target">
			<bean class="service.ProposalServiceImpl">
				<property name="pdao" ref="proposalDAO"></property>
			</bean>
		</property>
		<property name="transactionAttributeSource" ref="hibernateTransactionAttributeSource">
		</property>
	</bean>
	
	
		<bean id="argumentSchemeService"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="hibernateTransactionManager">
		</property>
		<property name="target">
			<bean class="service.ArgumentSchemeServiceImpl">
				<property name="asdao" ref="argumentSchemeDAO"></property>
			</bean>
		</property>
		<property name="transactionAttributeSource" ref="hibernateTransactionAttributeSource">
		</property>
	</bean>
	
	
	
		<bean id="aspectService"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="hibernateTransactionManager">
		</property>
		<property name="target">
			<bean class="service.AspectServiceImpl">
				<property name="adao" ref="aspectDAO"></property>
			</bean>
		</property>
		<property name="transactionAttributeSource" ref="hibernateTransactionAttributeSource">
		</property>
	</bean>
	
		<bean id="criticalQuestionService"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="hibernateTransactionManager">
		</property>
		<property name="target">
			<bean class="service.CriticalQuestionServiceImpl">
				<property name="cdao" ref="criticalQuestionDAO"></property>
			</bean>
		</property>
		<property name="transactionAttributeSource" ref="hibernateTransactionAttributeSource">
		</property>
	</bean>
	
	
	
<!-- configure Action -->	


	<bean id="showAction" class="action.ShowAction"
		scope="prototype">
		<property name="ps" ref="proposalService">
				</property>
		
		<property name="ass" ref="argumentSchemeService">
		
		</property>
	</bean>
	
	
	<bean id="proposalAction" class="action.ProposalAction"
		scope="prototype">
		<property name="ps" ref="proposalService">
		</property>
		<property name="as" ref="aspectService">
		</property>
	</bean>


	<bean id="argumentSchemeAction" class="action.ArgumentSchemeAction"
		scope="prototype" >
		<property name="ass" ref="argumentSchemeService">
		</property>
	</bean>




	<bean id="criticalQuestionAction" class="action.CriticalQuestionAction"
		scope="prototype">
		<property name="cqs" ref="criticalQuestionService">
		</property>
		<property name="as" ref="aspectService">
		</property>
		<property name="ass" ref="argumentSchemeService">
		</property>
	</bean>



</beans>